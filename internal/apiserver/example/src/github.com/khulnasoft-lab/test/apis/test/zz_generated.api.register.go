// Code generated by main. DO NOT EDIT.

package test

import (
	"context"
	"fmt"

	"dev.khulnasoft.com/apiserver/pkg/builders"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/registry/generic"
	"k8s.io/apiserver/pkg/registry/rest"
)

type NewRESTFunc func() rest.Storage

var (
	TestClusterRoleStorage = builders.NewApiResourceWithStorage( // Resource status endpoint
		InternalClusterRole,
		func() runtime.Object { return &ClusterRole{} },     // Register versioned resource
		func() runtime.Object { return &ClusterRoleList{} }, // Register versioned resource list
		NewClusterRoleREST,
	)
	NewClusterRoleREST = func(getter generic.RESTOptionsGetter) rest.Storage {
		return NewClusterRoleRESTFunc()
	}
	NewClusterRoleRESTFunc NewRESTFunc
	InternalClusterRole    = builders.NewInternalResource(
		"clusterroles",
		"ClusterRole",
		func() runtime.Object { return &ClusterRole{} },
		func() runtime.Object { return &ClusterRoleList{} },
	)
	InternalClusterRoleStatus = builders.NewInternalResourceStatus(
		"clusterroles",
		"ClusterRoleStatus",
		func() runtime.Object { return &ClusterRole{} },
		func() runtime.Object { return &ClusterRoleList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("test.loft.sh").WithKinds(
		InternalClusterRole,
		InternalClusterRoleStatus,
	)

	// Required by code generated by go2idl
	AddToScheme = (&runtime.SchemeBuilder{
		ApiVersion.SchemeBuilder.AddToScheme,
		RegisterDefaults,
	}).AddToScheme
	SchemeBuilder      = ApiVersion.SchemeBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type ClusterRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterRoleSpec   `json:"spec,omitempty"`
	Status            ClusterRoleStatus `json:"status,omitempty"`
}

type ClusterRoleSpec struct {
	Rules []string `json:"rules"`
}

type ClusterRoleStatus struct {
}

// ClusterRole Functions and Structs
//
// +k8s:deepcopy-gen=false
type ClusterRoleStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type ClusterRoleStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type ClusterRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterRole `json:"items"`
}

func (ClusterRole) NewStatus() interface{} {
	return ClusterRoleStatus{}
}

func (pc *ClusterRole) GetStatus() interface{} {
	return pc.Status
}

func (pc *ClusterRole) SetStatus(s interface{}) {
	pc.Status = s.(ClusterRoleStatus)
}

func (pc *ClusterRole) GetSpec() interface{} {
	return pc.Spec
}

func (pc *ClusterRole) SetSpec(s interface{}) {
	pc.Spec = s.(ClusterRoleSpec)
}

func (pc *ClusterRole) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *ClusterRole) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc ClusterRole) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store ClusterRole.
// +k8s:deepcopy-gen=false
type ClusterRoleRegistry interface {
	ListClusterRoles(ctx context.Context, options *internalversion.ListOptions) (*ClusterRoleList, error)
	GetClusterRole(ctx context.Context, id string, options *metav1.GetOptions) (*ClusterRole, error)
	CreateClusterRole(ctx context.Context, id *ClusterRole) (*ClusterRole, error)
	UpdateClusterRole(ctx context.Context, id *ClusterRole) (*ClusterRole, error)
	DeleteClusterRole(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewClusterRoleRegistry(sp builders.StandardStorageProvider) ClusterRoleRegistry {
	return &storageClusterRole{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageClusterRole struct {
	builders.StandardStorageProvider
}

func (s *storageClusterRole) ListClusterRoles(ctx context.Context, options *internalversion.ListOptions) (*ClusterRoleList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*ClusterRoleList), err
}

func (s *storageClusterRole) GetClusterRole(ctx context.Context, id string, options *metav1.GetOptions) (*ClusterRole, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*ClusterRole), nil
}

func (s *storageClusterRole) CreateClusterRole(ctx context.Context, object *ClusterRole) (*ClusterRole, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*ClusterRole), nil
}

func (s *storageClusterRole) UpdateClusterRole(ctx context.Context, object *ClusterRole) (*ClusterRole, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*ClusterRole), nil
}

func (s *storageClusterRole) DeleteClusterRole(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil, &metav1.DeleteOptions{})
	return sync, err
}
