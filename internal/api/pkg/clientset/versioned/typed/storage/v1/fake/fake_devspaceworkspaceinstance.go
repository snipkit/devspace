// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "dev.khulnasoft.com/api/pkg/apis/storage/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeDevSpaceWorkspaceInstances implements DevSpaceWorkspaceInstanceInterface
type FakeDevSpaceWorkspaceInstances struct {
	Fake *FakeStorageV1
	ns   string
}

var devspaceworkspaceinstancesResource = v1.SchemeGroupVersion.WithResource("devspaceworkspaceinstances")

var devspaceworkspaceinstancesKind = v1.SchemeGroupVersion.WithKind("DevSpaceWorkspaceInstance")

// Get takes name of the devSpaceWorkspaceInstance, and returns the corresponding devSpaceWorkspaceInstance object, and an error if there is any.
func (c *FakeDevSpaceWorkspaceInstances) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.DevSpaceWorkspaceInstance, err error) {
	emptyResult := &v1.DevSpaceWorkspaceInstance{}
	obj, err := c.Fake.
		Invokes(testing.NewGetActionWithOptions(devspaceworkspaceinstancesResource, c.ns, name, options), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.DevSpaceWorkspaceInstance), err
}

// List takes label and field selectors, and returns the list of DevSpaceWorkspaceInstances that match those selectors.
func (c *FakeDevSpaceWorkspaceInstances) List(ctx context.Context, opts metav1.ListOptions) (result *v1.DevSpaceWorkspaceInstanceList, err error) {
	emptyResult := &v1.DevSpaceWorkspaceInstanceList{}
	obj, err := c.Fake.
		Invokes(testing.NewListActionWithOptions(devspaceworkspaceinstancesResource, devspaceworkspaceinstancesKind, c.ns, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1.DevSpaceWorkspaceInstanceList{ListMeta: obj.(*v1.DevSpaceWorkspaceInstanceList).ListMeta}
	for _, item := range obj.(*v1.DevSpaceWorkspaceInstanceList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested devSpaceWorkspaceInstances.
func (c *FakeDevSpaceWorkspaceInstances) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchActionWithOptions(devspaceworkspaceinstancesResource, c.ns, opts))

}

// Create takes the representation of a devSpaceWorkspaceInstance and creates it.  Returns the server's representation of the devSpaceWorkspaceInstance, and an error, if there is any.
func (c *FakeDevSpaceWorkspaceInstances) Create(ctx context.Context, devSpaceWorkspaceInstance *v1.DevSpaceWorkspaceInstance, opts metav1.CreateOptions) (result *v1.DevSpaceWorkspaceInstance, err error) {
	emptyResult := &v1.DevSpaceWorkspaceInstance{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateActionWithOptions(devspaceworkspaceinstancesResource, c.ns, devSpaceWorkspaceInstance, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.DevSpaceWorkspaceInstance), err
}

// Update takes the representation of a devSpaceWorkspaceInstance and updates it. Returns the server's representation of the devSpaceWorkspaceInstance, and an error, if there is any.
func (c *FakeDevSpaceWorkspaceInstances) Update(ctx context.Context, devSpaceWorkspaceInstance *v1.DevSpaceWorkspaceInstance, opts metav1.UpdateOptions) (result *v1.DevSpaceWorkspaceInstance, err error) {
	emptyResult := &v1.DevSpaceWorkspaceInstance{}
	obj, err := c.Fake.
		Invokes(testing.NewUpdateActionWithOptions(devspaceworkspaceinstancesResource, c.ns, devSpaceWorkspaceInstance, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.DevSpaceWorkspaceInstance), err
}

// Delete takes name of the devSpaceWorkspaceInstance and deletes it. Returns an error if one occurs.
func (c *FakeDevSpaceWorkspaceInstances) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(devspaceworkspaceinstancesResource, c.ns, name, opts), &v1.DevSpaceWorkspaceInstance{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeDevSpaceWorkspaceInstances) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := testing.NewDeleteCollectionActionWithOptions(devspaceworkspaceinstancesResource, c.ns, opts, listOpts)

	_, err := c.Fake.Invokes(action, &v1.DevSpaceWorkspaceInstanceList{})
	return err
}

// Patch applies the patch and returns the patched devSpaceWorkspaceInstance.
func (c *FakeDevSpaceWorkspaceInstances) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.DevSpaceWorkspaceInstance, err error) {
	emptyResult := &v1.DevSpaceWorkspaceInstance{}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceActionWithOptions(devspaceworkspaceinstancesResource, c.ns, name, pt, data, opts, subresources...), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.DevSpaceWorkspaceInstance), err
}
