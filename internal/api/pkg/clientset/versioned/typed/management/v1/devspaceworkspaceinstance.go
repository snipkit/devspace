// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"

	v1 "dev.khulnasoft.com/api/pkg/apis/management/v1"
	scheme "dev.khulnasoft.com/api/pkg/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// DevSpaceWorkspaceInstancesGetter has a method to return a DevSpaceWorkspaceInstanceInterface.
// A group's client should implement this interface.
type DevSpaceWorkspaceInstancesGetter interface {
	DevSpaceWorkspaceInstances(namespace string) DevSpaceWorkspaceInstanceInterface
}

// DevSpaceWorkspaceInstanceInterface has methods to work with DevSpaceWorkspaceInstance resources.
type DevSpaceWorkspaceInstanceInterface interface {
	Create(ctx context.Context, devSpaceWorkspaceInstance *v1.DevSpaceWorkspaceInstance, opts metav1.CreateOptions) (*v1.DevSpaceWorkspaceInstance, error)
	Update(ctx context.Context, devSpaceWorkspaceInstance *v1.DevSpaceWorkspaceInstance, opts metav1.UpdateOptions) (*v1.DevSpaceWorkspaceInstance, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.DevSpaceWorkspaceInstance, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.DevSpaceWorkspaceInstanceList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.DevSpaceWorkspaceInstance, err error)
	GetState(ctx context.Context, devSpaceWorkspaceInstanceName string, options metav1.GetOptions) (*v1.DevSpaceWorkspaceInstanceState, error)
	SetState(ctx context.Context, devSpaceWorkspaceInstanceName string, devSpaceWorkspaceInstanceState *v1.DevSpaceWorkspaceInstanceState, opts metav1.CreateOptions) (*v1.DevSpaceWorkspaceInstanceState, error)
	Troubleshoot(ctx context.Context, devSpaceWorkspaceInstanceName string, options metav1.GetOptions) (*v1.DevSpaceWorkspaceInstanceTroubleshoot, error)

	DevSpaceWorkspaceInstanceExpansion
}

// devSpaceWorkspaceInstances implements DevSpaceWorkspaceInstanceInterface
type devSpaceWorkspaceInstances struct {
	*gentype.ClientWithList[*v1.DevSpaceWorkspaceInstance, *v1.DevSpaceWorkspaceInstanceList]
}

// newDevSpaceWorkspaceInstances returns a DevSpaceWorkspaceInstances
func newDevSpaceWorkspaceInstances(c *ManagementV1Client, namespace string) *devSpaceWorkspaceInstances {
	return &devSpaceWorkspaceInstances{
		gentype.NewClientWithList[*v1.DevSpaceWorkspaceInstance, *v1.DevSpaceWorkspaceInstanceList](
			"devspaceworkspaceinstances",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1.DevSpaceWorkspaceInstance { return &v1.DevSpaceWorkspaceInstance{} },
			func() *v1.DevSpaceWorkspaceInstanceList { return &v1.DevSpaceWorkspaceInstanceList{} }),
	}
}

// GetState takes name of the devSpaceWorkspaceInstance, and returns the corresponding v1.DevSpaceWorkspaceInstanceState object, and an error if there is any.
func (c *devSpaceWorkspaceInstances) GetState(ctx context.Context, devSpaceWorkspaceInstanceName string, options metav1.GetOptions) (result *v1.DevSpaceWorkspaceInstanceState, err error) {
	result = &v1.DevSpaceWorkspaceInstanceState{}
	err = c.GetClient().Get().
		Namespace(c.GetNamespace()).
		Resource("devspaceworkspaceinstances").
		Name(devSpaceWorkspaceInstanceName).
		SubResource("state").
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// SetState takes the representation of a devSpaceWorkspaceInstanceState and creates it.  Returns the server's representation of the devSpaceWorkspaceInstanceState, and an error, if there is any.
func (c *devSpaceWorkspaceInstances) SetState(ctx context.Context, devSpaceWorkspaceInstanceName string, devSpaceWorkspaceInstanceState *v1.DevSpaceWorkspaceInstanceState, opts metav1.CreateOptions) (result *v1.DevSpaceWorkspaceInstanceState, err error) {
	result = &v1.DevSpaceWorkspaceInstanceState{}
	err = c.GetClient().Post().
		Namespace(c.GetNamespace()).
		Resource("devspaceworkspaceinstances").
		Name(devSpaceWorkspaceInstanceName).
		SubResource("state").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(devSpaceWorkspaceInstanceState).
		Do(ctx).
		Into(result)
	return
}

// Troubleshoot takes name of the devSpaceWorkspaceInstance, and returns the corresponding v1.DevSpaceWorkspaceInstanceTroubleshoot object, and an error if there is any.
func (c *devSpaceWorkspaceInstances) Troubleshoot(ctx context.Context, devSpaceWorkspaceInstanceName string, options metav1.GetOptions) (result *v1.DevSpaceWorkspaceInstanceTroubleshoot, err error) {
	result = &v1.DevSpaceWorkspaceInstanceTroubleshoot{}
	err = c.GetClient().Get().
		Namespace(c.GetNamespace()).
		Resource("devspaceworkspaceinstances").
		Name(devSpaceWorkspaceInstanceName).
		SubResource("troubleshoot").
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}
